# Script t·∫°o icons PWA t·ª´ logo hi·ªán c√≥
# S·ª≠ d·ª•ng Python v·ªõi Pillow ƒë·ªÉ resize logo th√†nh c√°c k√≠ch th∆∞·ªõc c·∫ßn thi·∫øt

import os
from PIL import Image, ImageDraw

def create_icon_from_logo():
    """T·∫°o icons PWA t·ª´ logo hi·ªán c√≥"""
    try:
        # ƒê∆∞·ªùng d·∫´n logo g·ªëc
        logo_path = "static/images/logo-vecter.png"
        
        if not os.path.exists(logo_path):
            print(f"‚ùå Kh√¥ng t√¨m th·∫•y logo t·∫°i: {logo_path}")
            return False
        
        # M·ªü logo g·ªëc
        logo = Image.open(logo_path)
        print(f"‚úÖ ƒê√£ load logo: {logo.size}")
        
        # Chuy·ªÉn sang RGBA n·∫øu c·∫ßn
        if logo.mode != 'RGBA':
            logo = logo.convert('RGBA')
        
        # K√≠ch th∆∞·ªõc icons c·∫ßn t·∫°o
        sizes = [
            (192, 192, "icon-192x192.png"),
            (512, 512, "icon-512x512.png"), 
            (180, 180, "apple-touch-icon.png"),
            (32, 32, "favicon-32x32.png"),
            (16, 16, "favicon-16x16.png")
        ]
        
        for width, height, filename in sizes:
            # Resize logo
            icon = logo.resize((width, height), Image.Resampling.LANCZOS)
            
            # L∆∞u icon
            icon_path = f"static/images/{filename}"
            icon.save(icon_path, "PNG", optimize=True)
            print(f"‚úÖ ƒê√£ t·∫°o: {icon_path} ({width}x{height})")
        
        print("\nüéâ T·∫°o icons PWA th√†nh c√¥ng!")
        return True
        
    except Exception as e:
        print(f"‚ùå L·ªói t·∫°o icons: {e}")
        return False

if __name__ == "__main__":
    create_icon_from_logo()
